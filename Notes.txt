SECTION 2
---------
# Query to create database
create database mydb;

# To use a database
use mydb;

# Show tables
show tables;

Important documentation
-----------------------
Spring data JPA
https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#preface

Common Spring boot application properties
https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties-data

SECTION 4
---------
ORM Basics

Various layers in typical java EE application
> Presentation layer: Responsible for UI of application.
> Integration layer: This layer is responsible to connect with other application to provide or consume their services
> Service layer: This layer holds all business logic
> Data Access layer : Responsible to connect to database and provice database service to service layer 

SECTION 5
---------
# SQL to create table
use mydb;

create table product(id int PRIMARY KEY, name varchar(20), description varchar(100), price decimal(8,3));

# delete from table
delete from product where id=1;

SECTION 6
---------
ID Generation Strategy
GenerationType.AUTO: Here hibernate will go and check with underlying database what strategy do they support like IDENTITY, SEQUENCE, TABLE
GenerationType.IDENTITY: Database provider will provide us with generated id value.
GenerationType.SEQUENCE: Hibernate with will provide with auto incremented sequence. You will have to tell hibernate about the sequence.
GenerationType.TABLE: Hibernate will generate a special table where it will store generate id value and use as primary key for our main table. For next value generated hibernate will check it first if it exist in table and then proceed accordingly.

SECTION 7
---------
finder methods
> findById(int id)
> findByNameAndEmail(String name, String email)
> findByEmailLike(String email)
> findByPriceGreaterThan(double price)

SECTION 8
---------
Pageable its as interface for paging request
PageRequest is an implementation of Pageable interface
Sort class used for sorting of results
Order class defines order of result as Ascending or Descending with field names.

SECTION 9
---------
Writing JPQL query with @Query annotation on query methods in Entity Repository interface
e.g.
@Query("from Student")
List<Student> findAllStudents(Pageable pageable);

To extract partial data use following syntax of query methods
@Query("select st.firstName, st.lastName from Student st")
List<Object[]> findAllStudentPartialData();

To pass parameters to JPQL query use following syntax
@Query("from Student where score>:min and score<:max")
List<Student> findStudentsForGivenScores(@Param("min") int min, @Param("max") int max);

SECTION 10
----------
Pass pageable object to finder methods to have pagination and sorting results. e.g.

@Query("from Student")
List<Student> findAllStudents(Pageable pageable);

SECTION 11
----------
Write native sql query with following two method syntax

@Query(value="select * from student where fname=:firstName", nativeQuery = true)
List<Student> findFindFirstnameNQ(@Param("firstName") String firstName);

@Query(value="select lname, score from student where fname=:firstName", nativeQuery = true)
List<Object[]> findStudentPartialDataNQ(@Param("firstName") String firstName);

SECTION 12
----------
Inheritance mapping can be achieved using following techniques
SINGLE_TABLE
TABLE_PER_CLASS
JOINED

SINGLE_TABLE strategy example
@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name="pmode", discriminatorType = DiscriminatorType.STRING)
public abstract class Payment {

@Entity
@DiscriminatorValue("cc")
public class CreditCard extends Payment{

@Entity
@DiscriminatorValue("ch")
public class Cheque extends Payment{

TABLE_PER_CLASS
@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public abstract class Payment {

@Entity
@Table(name="card")
public class CreditCard extends Payment{

@Entity
@Table(name="bankcheck")
public class Cheque extends Payment{

JOINED
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
public abstract class Payment {

@Entity
@Table(name="card")
@PrimaryKeyJoinColumn(name="id")
public class CreditCard extends Payment{

@Entity
@Table(name="bankcheck")
@PrimaryKeyJoinColumn(name="id")
public class Cheque extends Payment{

SECTION 13
----------
Use @Embedded and @Embeddable  annotation to save an embedded object along with parent object

@Entity
public class Employee {

    @Id
    private int id;
    private String name;
    @Embedded
    Address address;

@Embeddable
public class Address {

SECTION 14
----------
cascade = "persist" // An insert operation on main object should be propagated to child object
cascade = "merge" // An insert or update operation on main object should be propagated to child object
cascade = "remove" // An remove operation on main object should be propagated to child object
cascade = "refresh" // If using underlying entity manager if parent object is refreshed child object is automatically refreshed
cascade = "detach" // Here child object is detached from parent object
cascade = "all" // Means all of above options

fetch type = Eager, Lazy 
By default fetch type is Lazy. So if some child object need to be fetched at some later time we need to use @Transactional annotation.

@Entity
public class Customer {
	@OneToMany(mappedBy="customer", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	private Set<PhoneNumber> numbers;
	.....

@Entity
public class PhoneNumber {
	@ManyToOne
    	@JoinColumn(name="customer_id" )
    	private Customer customer;
    	.....
    	
SECTION 15
----------

@Entity
public class Programmer {
	@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    	@JoinTable(name="programmers_projects",
            joinColumns = @JoinColumn(name="programmer_id", referencedColumnName = "id"),
            inverseJoinColumns = @JoinColumn(name="project_id", referencedColumnName = "id"))
    	Set<Project> projects;
...


@Entity
public class Project {
	@ManyToMany(mappedBy = "projects")
    	private Set<Programmer> programmers;
...

SECTION 16
----------
Type of One to One associations
Primary Key association: Bidirectional


Foreign Key association: Unidirectional

@Entity
public class Person {
	@OneToOne(mappedBy = "person")
    	private Licence licence;
...

@Entity
public class Licence {
	@Temporal(TemporalType.DATE)
    	private Date validFrom;

    	@Temporal(TemporalType.DATE)
    	private Date validTo;

    	@OneToOne(cascade = CascadeType.ALL)
   	@JoinColumn(name="person_id")
    	private Person person;
...

SECTION 17
----------

