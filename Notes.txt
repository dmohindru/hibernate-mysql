SECTION 2: SOFTWARE SETUP
-------------------------
# Query to create database
create database mydb;

# To use a database
use mydb;

# Show tables
show tables;

Important documentation
-----------------------
Spring data JPA
https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#preface

Common Spring boot application properties
https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties-data

SECTION 4: ORM BASICS
---------------------
ORM Basics

Various layers in typical java EE application
> Presentation layer: Responsible for UI of application.
> Integration layer: This layer is responsible to connect with other application to provide or consume their services
> Service layer: This layer holds all business logic
> Data Access layer : Responsible to connect to database and provice database service to service layer 

SECTION 5: SIMPLE CRUD OPERATIONS
---------------------------------
Project: productdata

# SQL to create table
use mydb;

create table product(id int PRIMARY KEY, name varchar(20), description varchar(100), price decimal(8,3));

# delete from table
delete from product where id=1;

SECTION 6: GENERATORS
----------------------
Project: idgenerators

ID Generation Strategy
GenerationType.AUTO: Here hibernate will go and check with underlying database what strategy do they support like IDENTITY, SEQUENCE, TABLE
GenerationType.IDENTITY: Database provider will provide us with generated id value.
GenerationType.SEQUENCE: Hibernate with will provide with auto incremented sequence. You will have to tell hibernate about the sequence.
GenerationType.TABLE: Hibernate will generate a special table where it will store generate id value and use as primary key for our main table. For next value generated hibernate will check it first if it exist in table and then proceed accordingly.

SECTION 7: SPRING DATA FINDER METHOD
------------------------------------
Project: productdata

finder methods
> findById(int id)
> findByNameAndEmail(String name, String email)
> findByEmailLike(String email)
> findByPriceGreaterThan(double price)

SECTION 8: PAGING AND SORTING
-----------------------------
Project: productdata

Pageable its as interface for paging request
PageRequest is an implementation of Pageable interface
Sort class used for sorting of results
Order class defines order of result as Ascending or Descending with field names.

SECTION 9: JPQL
---------------
Project: jpqlandnativesql

Writing JPQL query with @Query annotation on query methods in Entity Repository interface
e.g.
@Query("from Student")
List<Student> findAllStudents(Pageable pageable);

To extract partial data use following syntax of query methods
@Query("select st.firstName, st.lastName from Student st")
List<Object[]> findAllStudentPartialData();

To pass parameters to JPQL query use following syntax
@Query("from Student where score>:min and score<:max")
List<Student> findStudentsForGivenScores(@Param("min") int min, @Param("max") int max);

SECTION 10: PAGING AND SORTING WITH JPQL
----------------------------------------
Project: jpqlandnativesql

Pass pageable object to finder methods to have pagination and sorting results. e.g.

@Query("from Student")
List<Student> findAllStudents(Pageable pageable);

SECTION 11: NATIVE SQL QUERY
----------------------------
Project: jpqlandnativesql

Write native sql query with following two method syntax

@Query(value="select * from student where fname=:firstName", nativeQuery = true)
List<Student> findFindFirstnameNQ(@Param("firstName") String firstName);

@Query(value="select lname, score from student where fname=:firstName", nativeQuery = true)
List<Object[]> findStudentPartialDataNQ(@Param("firstName") String firstName);

SECTION 12: INHERITANCE MAPPING
-------------------------------
Project: hibernateinheritance

Inheritance mapping can be achieved using following techniques
SINGLE_TABLE
TABLE_PER_CLASS
JOINED

SINGLE_TABLE strategy example
@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name="pmode", discriminatorType = DiscriminatorType.STRING)
public abstract class Payment {

@Entity
@DiscriminatorValue("cc")
public class CreditCard extends Payment{

@Entity
@DiscriminatorValue("ch")
public class Cheque extends Payment{

TABLE_PER_CLASS
@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public abstract class Payment {

@Entity
@Table(name="card")
public class CreditCard extends Payment{

@Entity
@Table(name="bankcheck")
public class Cheque extends Payment{

JOINED
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
public abstract class Payment {

@Entity
@Table(name="card")
@PrimaryKeyJoinColumn(name="id")
public class CreditCard extends Payment{

@Entity
@Table(name="bankcheck")
@PrimaryKeyJoinColumn(name="id")
public class Cheque extends Payment{

SECTION 13: COMPONENT MAPPING
-----------------------------
Project: componentmapping

Use @Embedded and @Embeddable  annotation to save an embedded object along with parent object

@Entity
public class Employee {

    @Id
    private int id;
    private String name;
    @Embedded
    Address address;

@Embeddable
public class Address {

SECTION 14: RELATIONSHIP IN HIBERNATE
--------------------------------------
Project: associations

cascade = "persist" // An insert operation on main object should be propagated to child object
cascade = "merge" // An insert or update operation on main object should be propagated to child object
cascade = "remove" // An remove operation on main object should be propagated to child object
cascade = "refresh" // If using underlying entity manager if parent object is refreshed child object is automatically refreshed
cascade = "detach" // Here child object is detached from parent object
cascade = "all" // Means all of above options

fetch type = Eager, Lazy 
By default fetch type is Lazy. So if some child object need to be fetched at some later time we need to use @Transactional annotation.

@Entity
public class Customer {
	@OneToMany(mappedBy="customer", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	private Set<PhoneNumber> numbers;
	.....

@Entity
public class PhoneNumber {
	@ManyToOne
    	@JoinColumn(name="customer_id" )
    	private Customer customer;
    	.....
    	
SECTION 15: MANY TO MANY ASSOCIATION
------------------------------------
Project: associations

@Entity
public class Programmer {
	@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    	@JoinTable(name="programmers_projects",
            joinColumns = @JoinColumn(name="programmer_id", referencedColumnName = "id"),
            inverseJoinColumns = @JoinColumn(name="project_id", referencedColumnName = "id"))
    	Set<Project> projects;
...


@Entity
public class Project {
	@ManyToMany(mappedBy = "projects")
    	private Set<Programmer> programmers;
...

SECTION 16: ONE TO ONE MAPPING
------------------------------
Project: associations

Type of One to One associations
Primary Key association: Bidirectional


Foreign Key association: Unidirectional

@Entity
public class Person {
	@OneToOne(mappedBy = "person")
    	private Licence licence;
...

@Entity
public class Licence {
	@Temporal(TemporalType.DATE)
    	private Date validFrom;

    	@Temporal(TemporalType.DATE)
    	private Date validTo;

    	@OneToOne(cascade = CascadeType.ALL)
   	@JoinColumn(name="person_id")
    	private Person person;
...

SECTION 17: HIBERNATE CACHING MECHANISM
---------------------------------------
Project: productdata

Cache Levels
Level 1: Session
In this type a separate cache is maintained for different session that are created for different clients.  


Level 2: SessionFactory
In this type a common cache is maintained which is shared among all sessions

Different type of level 2 caches
1. ehcache <--- most popular and easy to use
2. swaram cache
3. Jboss tree cache
4. OS cache
5. Tangosol cache

@Transactional annotation is required for hibernate level 1 cache to work.

Ehcache: 
1. Fast and light weight.
2. In memory and disk based.
3. Can configure Timeout, total life time. 

Steps to configure Ehcache
1. Add Maven Dependencies
2. Enable cache for the application
3. Create ehcache.xml
4. Make entities cacheable
5. Test caching 

Cache concurrency strategy
1. READ_ONLY
2. NONSTRICT_READ_WRITE
3. READ_WRITE
4. TRANSACTIONAL

SECTION 18: TRANSACTION MANAGEMENT
----------------------------------
Project: transactionmanagement

Transaction properties
A : Atomic
C : Consistent 
I : Isolation
D : Durability

Transaction Management Components
1. Transaction App
2. Transactional Manager/ Transaction Co-ordinator
3. Resource Manager
4. Local Transaction or Distributed Transaction

To make a transaction mark a method with @Transactional annotation

SECTION 19: SAVE AND RETRIEVE FILES
-----------------------------------
Project: filedata

To store a file in a database make table which has column as BLOB

To model this in java declare a class with following fields
@Entity
class Image {
@Id
int id;
String name;
@Lob
byte[] data;
... // other fields and getters and setters 
}

To store data into database we can read data into byte array from File and FileInputStream and write it to database.

To generate file from BLOB value from database we can read bytes read from database and write to a file using FileOutputStream


SECTION 20: END TO END MINI PROJECT
-----------------------------------
Project: patitentscheduling


SECTION 21: WORKING WITH MONGODB
--------------------------------
Project: mongodemo

Very Important: Add following annotation to main application class of spring boot application.

@EnableMongoRepositories(basePackageClasses = ProductRepository.class)
@SpringBootApplication
public class MongodemoApplication {
...


SECTION 22: COMPOSITE PRIMARY KEY
---------------------------------
Project: compositekey

To build composite key follow steps as below.
Technique 1: Using @IdClass annotations
--------------------------------------
1. Create a key class as below
public class CustomerId implements Serializable {
    private int id;
    private String email;
...

2. Define same of Key class in your main entity class and mark with following annotations
@Entity
@IdClass(CustomerId.class)
public class Customer {
    @Id
    private int id;
    @Id
    private String email;
    private String name;
...

3. Create Repository class as below
public interface CustomerRepository extends CrudRepository<Customer, CustomerId> { }

Technique 2: Using @Embeddable and @EmbeddedId annotations
----------------------------------------------------------
1. Create a key class as @Embeddable
@Embeddable
public class CustomerId implements Serializable {
    private int id;
    private String email;
...

2. Declare Key class as a component in main entity class
@Entity
public class Customer {

    @EmbeddedId
    private CustomerId customerId;
    private String name;
...

3. 3. Create Repository class as below
public interface CustomerRepository extends CrudRepository<Customer, CustomerId> { }


SECTION 23: CLINICAL DATA COLLECTION AND REPORTING PROJECT
-----------------------------------------------------------
Project: clinicalsapi



